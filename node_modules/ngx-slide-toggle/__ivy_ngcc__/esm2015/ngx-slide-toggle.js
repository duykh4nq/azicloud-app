import { Component, EventEmitter, Input, NgModule, Output, ViewChild } from '@angular/core';
import { CommonModule } from '@angular/common';

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
import * as ɵngcc0 from '@angular/core';

const _c0 = ["materialSlideToggle"];
let nextUniqueId = 0;
class MaterialToggleComponent {
    constructor() {
        this._uniqueId = `material-slide-toggle-${++nextUniqueId}`;
        this.name = null;
        this.id = this._uniqueId;
        // tslint:disable:no-input-rename
        this.ariaLabel = null;
        this.ariaLabelledby = null;
        this.change = new EventEmitter();
    }
    /**
     * @param {?} event
     * @return {?}
     */
    onChange(event) {
        event.stopPropagation();
        this.change.emit(this.inputElement.nativeElement.checked);
    }
    /**
     * @param {?} event
     * @return {?}
     */
    onClick(event) {
        event.stopPropagation();
    }
}
MaterialToggleComponent.ɵfac = function MaterialToggleComponent_Factory(t) { return new (t || MaterialToggleComponent)(); };
MaterialToggleComponent.ɵcmp = ɵngcc0.ɵɵdefineComponent({ type: MaterialToggleComponent, selectors: [["material-slide-toggle"]], viewQuery: function MaterialToggleComponent_Query(rf, ctx) { if (rf & 1) {
        ɵngcc0.ɵɵviewQuery(_c0, 1);
    } if (rf & 2) {
        let _t;
        ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx.inputElement = _t.first);
    } }, inputs: { name: "name", id: "id", ariaLabel: ["aria-label", "ariaLabel"], ariaLabelledby: ["aria-labelledby", "ariaLabelledby"], checked: "checked", disabled: "disabled" }, outputs: { change: "change" }, decls: 4, vars: 11, consts: [[1, "material-switch"], ["type", "checkbox", 3, "id", "checked", "disabled", "click", "change"], ["materialSlideToggle", ""], [1, "label-primary"]], template: function MaterialToggleComponent_Template(rf, ctx) { if (rf & 1) {
        ɵngcc0.ɵɵelementStart(0, "div", 0);
        ɵngcc0.ɵɵelementStart(1, "input", 1, 2);
        ɵngcc0.ɵɵlistener("click", function MaterialToggleComponent_Template_input_click_1_listener($event) { return ctx.onClick($event); })("change", function MaterialToggleComponent_Template_input_change_1_listener($event) { return ctx.onChange($event); });
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵelement(3, "label", 3);
        ɵngcc0.ɵɵelementEnd();
    } if (rf & 2) {
        ɵngcc0.ɵɵadvance(1);
        ɵngcc0.ɵɵclassProp("disabled", ctx.disabled);
        ɵngcc0.ɵɵproperty("id", ctx.id)("checked", ctx.checked)("disabled", ctx.disabled);
        ɵngcc0.ɵɵattribute("name", ctx.name)("aria-label", ctx.ariaLabel)("aria-labelledby", ctx.ariaLabelledby);
        ɵngcc0.ɵɵadvance(2);
        ɵngcc0.ɵɵclassProp("disabled", ctx.disabled);
        ɵngcc0.ɵɵattribute("for", ctx.id);
    } }, styles: [".material-switch[_ngcontent-%COMP%] {\n      display: inline-flex;\n      margin: 1em;\n      vertical-align: middle;\n      width: auto;\n    }\n\n    .material-switch[_ngcontent-%COMP%] > input[type=\"checkbox\"][_ngcontent-%COMP%] {\n      display: none;\n    }\n\n    .material-switch[_ngcontent-%COMP%] > label[_ngcontent-%COMP%] {\n      cursor: pointer;\n      height: 0px;\n      position: relative;\n      width: 40px;\n    }\n\n    .material-switch[_ngcontent-%COMP%] > label[_ngcontent-%COMP%]::before {\n      background: #000000;\n      box-shadow: inset 0px 0px 10px rgba(0, 0, 0, 0.5);\n      border-radius: 8px;\n      content: '';\n      height: 16px;\n      margin-top: -8px;\n      position: absolute;\n      opacity: 0.3;\n      transition: all 0.4s ease-in-out;\n      width: 40px;\n    }\n\n    .material-switch[_ngcontent-%COMP%] > label[_ngcontent-%COMP%]::after {\n      background: #ffffff;\n      border-radius: 16px;\n      box-shadow: 0px 0px 5px rgba(0, 0, 0, 0.3);\n      content: '';\n      height: 24px;\n      left: -4px;\n      margin-top: -8px;\n      position: absolute;\n      top: -4px;\n      transition: all 0.3s ease-in-out;\n      width: 24px;\n    }\n\n    .material-switch[_ngcontent-%COMP%] > input[type=\"checkbox\"][_ngcontent-%COMP%]:checked + label[_ngcontent-%COMP%]::before {\n      background: #3f51b5;\n      opacity: 0.5;\n    }\n\n    .material-switch[_ngcontent-%COMP%] > input[type=\"checkbox\"][_ngcontent-%COMP%]:checked + label[_ngcontent-%COMP%]::after {\n      background: #3f51b5;\n      left: 20px;\n    }\n\n    .disabled[_ngcontent-%COMP%] {\n      cursor: default;\n    }"] });
/** @nocollapse */
MaterialToggleComponent.ctorParameters = () => [];
MaterialToggleComponent.propDecorators = {
    "name": [{ type: Input },],
    "id": [{ type: Input },],
    "checked": [{ type: Input },],
    "disabled": [{ type: Input },],
    "ariaLabel": [{ type: Input, args: ['aria-label',] },],
    "ariaLabelledby": [{ type: Input, args: ['aria-labelledby',] },],
    "change": [{ type: Output },],
    "inputElement": [{ type: ViewChild, args: ['materialSlideToggle',] },],
};
(function () { (typeof ngDevMode === "undefined" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(MaterialToggleComponent, [{
        type: Component,
        args: [{
                selector: 'material-slide-toggle',
                template: `
    <div class="material-switch">
      <input #materialSlideToggle [id]="id" [attr.name]="name" type="checkbox" [attr.aria-label]="ariaLabel" [attr.aria-labelledby]="ariaLabelledby"
        (click)="onClick($event)" (change)="onChange($event)" [checked]="checked" [disabled]="disabled" [class.disabled]="disabled"
      />
      <label [attr.for]="id" [class.disabled]="disabled" class="label-primary"></label>
    </div>
  `,
                styles: [`
    .material-switch {
      display: inline-flex;
      margin: 1em;
      vertical-align: middle;
      width: auto;
    }

    .material-switch>input[type="checkbox"] {
      display: none;
    }

    .material-switch>label {
      cursor: pointer;
      height: 0px;
      position: relative;
      width: 40px;
    }

    .material-switch>label::before {
      background: #000000;
      box-shadow: inset 0px 0px 10px rgba(0, 0, 0, 0.5);
      border-radius: 8px;
      content: '';
      height: 16px;
      margin-top: -8px;
      position: absolute;
      opacity: 0.3;
      transition: all 0.4s ease-in-out;
      width: 40px;
    }

    .material-switch>label::after {
      background: #ffffff;
      border-radius: 16px;
      box-shadow: 0px 0px 5px rgba(0, 0, 0, 0.3);
      content: '';
      height: 24px;
      left: -4px;
      margin-top: -8px;
      position: absolute;
      top: -4px;
      transition: all 0.3s ease-in-out;
      width: 24px;
    }

    .material-switch>input[type="checkbox"]:checked+label::before {
      background: #3f51b5;
      opacity: 0.5;
    }

    .material-switch>input[type="checkbox"]:checked+label::after {
      background: #3f51b5;
      left: 20px;
    }

    .disabled {
      cursor: default;
    }
  `]
            }]
    }], function () { return []; }, { name: [{
            type: Input
        }], id: [{
            type: Input
        }], ariaLabel: [{
            type: Input,
            args: ['aria-label']
        }], ariaLabelledby: [{
            type: Input,
            args: ['aria-labelledby']
        }], change: [{
            type: Output
        }], checked: [{
            type: Input
        }], disabled: [{
            type: Input
        }], inputElement: [{
            type: ViewChild,
            args: ['materialSlideToggle']
        }] }); })();

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
class SlideToggleModule {
}
SlideToggleModule.ɵfac = function SlideToggleModule_Factory(t) { return new (t || SlideToggleModule)(); };
SlideToggleModule.ɵmod = ɵngcc0.ɵɵdefineNgModule({ type: SlideToggleModule });
SlideToggleModule.ɵinj = ɵngcc0.ɵɵdefineInjector({ imports: [[CommonModule]] });
/** @nocollapse */
SlideToggleModule.ctorParameters = () => [];
(function () { (typeof ngJitMode === "undefined" || ngJitMode) && ɵngcc0.ɵɵsetNgModuleScope(SlideToggleModule, { declarations: function () { return [MaterialToggleComponent]; }, imports: function () { return [CommonModule]; }, exports: function () { return [MaterialToggleComponent]; } }); })();
(function () { (typeof ngDevMode === "undefined" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(SlideToggleModule, [{
        type: NgModule,
        args: [{
                imports: [CommonModule],
                declarations: [MaterialToggleComponent],
                exports: [MaterialToggleComponent]
            }]
    }], null, null); })();

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
/**
 * Generated bundle index. Do not edit.
 */

export { MaterialToggleComponent, SlideToggleModule };

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibmd4LXNsaWRlLXRvZ2dsZS5qcyIsInNvdXJjZXMiOlsibmd4LXNsaWRlLXRvZ2dsZS5qcyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7OztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Oztnb0RBeUVFO0FBQ0Y7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7b0JBQUU7QUFDRjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7O2dGQU9FO0FBQ0Y7QUFDQTs7Ozs7Ozs7OzBCQUE0QztBQUM1QztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgQ29tcG9uZW50LCBFdmVudEVtaXR0ZXIsIElucHV0LCBOZ01vZHVsZSwgT3V0cHV0LCBWaWV3Q2hpbGQgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcbmltcG9ydCB7IENvbW1vbk1vZHVsZSB9IGZyb20gJ0Bhbmd1bGFyL2NvbW1vbic7XG5cbi8qKlxuICogQGZpbGVvdmVydmlldyBhZGRlZCBieSB0c2lja2xlXG4gKiBAc3VwcHJlc3Mge2NoZWNrVHlwZXN9IGNoZWNrZWQgYnkgdHNjXG4gKi9cbmxldCBuZXh0VW5pcXVlSWQgPSAwO1xuY2xhc3MgTWF0ZXJpYWxUb2dnbGVDb21wb25lbnQge1xuICAgIGNvbnN0cnVjdG9yKCkge1xuICAgICAgICB0aGlzLl91bmlxdWVJZCA9IGBtYXRlcmlhbC1zbGlkZS10b2dnbGUtJHsrK25leHRVbmlxdWVJZH1gO1xuICAgICAgICB0aGlzLm5hbWUgPSBudWxsO1xuICAgICAgICB0aGlzLmlkID0gdGhpcy5fdW5pcXVlSWQ7XG4gICAgICAgIC8vIHRzbGludDpkaXNhYmxlOm5vLWlucHV0LXJlbmFtZVxuICAgICAgICB0aGlzLmFyaWFMYWJlbCA9IG51bGw7XG4gICAgICAgIHRoaXMuYXJpYUxhYmVsbGVkYnkgPSBudWxsO1xuICAgICAgICB0aGlzLmNoYW5nZSA9IG5ldyBFdmVudEVtaXR0ZXIoKTtcbiAgICB9XG4gICAgLyoqXG4gICAgICogQHBhcmFtIHs/fSBldmVudFxuICAgICAqIEByZXR1cm4gez99XG4gICAgICovXG4gICAgb25DaGFuZ2UoZXZlbnQpIHtcbiAgICAgICAgZXZlbnQuc3RvcFByb3BhZ2F0aW9uKCk7XG4gICAgICAgIHRoaXMuY2hhbmdlLmVtaXQodGhpcy5pbnB1dEVsZW1lbnQubmF0aXZlRWxlbWVudC5jaGVja2VkKTtcbiAgICB9XG4gICAgLyoqXG4gICAgICogQHBhcmFtIHs/fSBldmVudFxuICAgICAqIEByZXR1cm4gez99XG4gICAgICovXG4gICAgb25DbGljayhldmVudCkge1xuICAgICAgICBldmVudC5zdG9wUHJvcGFnYXRpb24oKTtcbiAgICB9XG59XG5NYXRlcmlhbFRvZ2dsZUNvbXBvbmVudC5kZWNvcmF0b3JzID0gW1xuICAgIHsgdHlwZTogQ29tcG9uZW50LCBhcmdzOiBbe1xuICAgICAgICAgICAgICAgIHNlbGVjdG9yOiAnbWF0ZXJpYWwtc2xpZGUtdG9nZ2xlJyxcbiAgICAgICAgICAgICAgICB0ZW1wbGF0ZTogYFxuICAgIDxkaXYgY2xhc3M9XCJtYXRlcmlhbC1zd2l0Y2hcIj5cbiAgICAgIDxpbnB1dCAjbWF0ZXJpYWxTbGlkZVRvZ2dsZSBbaWRdPVwiaWRcIiBbYXR0ci5uYW1lXT1cIm5hbWVcIiB0eXBlPVwiY2hlY2tib3hcIiBbYXR0ci5hcmlhLWxhYmVsXT1cImFyaWFMYWJlbFwiIFthdHRyLmFyaWEtbGFiZWxsZWRieV09XCJhcmlhTGFiZWxsZWRieVwiXG4gICAgICAgIChjbGljayk9XCJvbkNsaWNrKCRldmVudClcIiAoY2hhbmdlKT1cIm9uQ2hhbmdlKCRldmVudClcIiBbY2hlY2tlZF09XCJjaGVja2VkXCIgW2Rpc2FibGVkXT1cImRpc2FibGVkXCIgW2NsYXNzLmRpc2FibGVkXT1cImRpc2FibGVkXCJcbiAgICAgIC8+XG4gICAgICA8bGFiZWwgW2F0dHIuZm9yXT1cImlkXCIgW2NsYXNzLmRpc2FibGVkXT1cImRpc2FibGVkXCIgY2xhc3M9XCJsYWJlbC1wcmltYXJ5XCI+PC9sYWJlbD5cbiAgICA8L2Rpdj5cbiAgYCxcbiAgICAgICAgICAgICAgICBzdHlsZXM6IFtgXG4gICAgLm1hdGVyaWFsLXN3aXRjaCB7XG4gICAgICBkaXNwbGF5OiBpbmxpbmUtZmxleDtcbiAgICAgIG1hcmdpbjogMWVtO1xuICAgICAgdmVydGljYWwtYWxpZ246IG1pZGRsZTtcbiAgICAgIHdpZHRoOiBhdXRvO1xuICAgIH1cblxuICAgIC5tYXRlcmlhbC1zd2l0Y2g+aW5wdXRbdHlwZT1cImNoZWNrYm94XCJdIHtcbiAgICAgIGRpc3BsYXk6IG5vbmU7XG4gICAgfVxuXG4gICAgLm1hdGVyaWFsLXN3aXRjaD5sYWJlbCB7XG4gICAgICBjdXJzb3I6IHBvaW50ZXI7XG4gICAgICBoZWlnaHQ6IDBweDtcbiAgICAgIHBvc2l0aW9uOiByZWxhdGl2ZTtcbiAgICAgIHdpZHRoOiA0MHB4O1xuICAgIH1cblxuICAgIC5tYXRlcmlhbC1zd2l0Y2g+bGFiZWw6OmJlZm9yZSB7XG4gICAgICBiYWNrZ3JvdW5kOiAjMDAwMDAwO1xuICAgICAgYm94LXNoYWRvdzogaW5zZXQgMHB4IDBweCAxMHB4IHJnYmEoMCwgMCwgMCwgMC41KTtcbiAgICAgIGJvcmRlci1yYWRpdXM6IDhweDtcbiAgICAgIGNvbnRlbnQ6ICcnO1xuICAgICAgaGVpZ2h0OiAxNnB4O1xuICAgICAgbWFyZ2luLXRvcDogLThweDtcbiAgICAgIHBvc2l0aW9uOiBhYnNvbHV0ZTtcbiAgICAgIG9wYWNpdHk6IDAuMztcbiAgICAgIHRyYW5zaXRpb246IGFsbCAwLjRzIGVhc2UtaW4tb3V0O1xuICAgICAgd2lkdGg6IDQwcHg7XG4gICAgfVxuXG4gICAgLm1hdGVyaWFsLXN3aXRjaD5sYWJlbDo6YWZ0ZXIge1xuICAgICAgYmFja2dyb3VuZDogI2ZmZmZmZjtcbiAgICAgIGJvcmRlci1yYWRpdXM6IDE2cHg7XG4gICAgICBib3gtc2hhZG93OiAwcHggMHB4IDVweCByZ2JhKDAsIDAsIDAsIDAuMyk7XG4gICAgICBjb250ZW50OiAnJztcbiAgICAgIGhlaWdodDogMjRweDtcbiAgICAgIGxlZnQ6IC00cHg7XG4gICAgICBtYXJnaW4tdG9wOiAtOHB4O1xuICAgICAgcG9zaXRpb246IGFic29sdXRlO1xuICAgICAgdG9wOiAtNHB4O1xuICAgICAgdHJhbnNpdGlvbjogYWxsIDAuM3MgZWFzZS1pbi1vdXQ7XG4gICAgICB3aWR0aDogMjRweDtcbiAgICB9XG5cbiAgICAubWF0ZXJpYWwtc3dpdGNoPmlucHV0W3R5cGU9XCJjaGVja2JveFwiXTpjaGVja2VkK2xhYmVsOjpiZWZvcmUge1xuICAgICAgYmFja2dyb3VuZDogIzNmNTFiNTtcbiAgICAgIG9wYWNpdHk6IDAuNTtcbiAgICB9XG5cbiAgICAubWF0ZXJpYWwtc3dpdGNoPmlucHV0W3R5cGU9XCJjaGVja2JveFwiXTpjaGVja2VkK2xhYmVsOjphZnRlciB7XG4gICAgICBiYWNrZ3JvdW5kOiAjM2Y1MWI1O1xuICAgICAgbGVmdDogMjBweDtcbiAgICB9XG5cbiAgICAuZGlzYWJsZWQge1xuICAgICAgY3Vyc29yOiBkZWZhdWx0O1xuICAgIH1cbiAgYF1cbiAgICAgICAgICAgIH0sXSB9LFxuXTtcbi8qKiBAbm9jb2xsYXBzZSAqL1xuTWF0ZXJpYWxUb2dnbGVDb21wb25lbnQuY3RvclBhcmFtZXRlcnMgPSAoKSA9PiBbXTtcbk1hdGVyaWFsVG9nZ2xlQ29tcG9uZW50LnByb3BEZWNvcmF0b3JzID0ge1xuICAgIFwibmFtZVwiOiBbeyB0eXBlOiBJbnB1dCB9LF0sXG4gICAgXCJpZFwiOiBbeyB0eXBlOiBJbnB1dCB9LF0sXG4gICAgXCJjaGVja2VkXCI6IFt7IHR5cGU6IElucHV0IH0sXSxcbiAgICBcImRpc2FibGVkXCI6IFt7IHR5cGU6IElucHV0IH0sXSxcbiAgICBcImFyaWFMYWJlbFwiOiBbeyB0eXBlOiBJbnB1dCwgYXJnczogWydhcmlhLWxhYmVsJyxdIH0sXSxcbiAgICBcImFyaWFMYWJlbGxlZGJ5XCI6IFt7IHR5cGU6IElucHV0LCBhcmdzOiBbJ2FyaWEtbGFiZWxsZWRieScsXSB9LF0sXG4gICAgXCJjaGFuZ2VcIjogW3sgdHlwZTogT3V0cHV0IH0sXSxcbiAgICBcImlucHV0RWxlbWVudFwiOiBbeyB0eXBlOiBWaWV3Q2hpbGQsIGFyZ3M6IFsnbWF0ZXJpYWxTbGlkZVRvZ2dsZScsXSB9LF0sXG59O1xuXG4vKipcbiAqIEBmaWxlb3ZlcnZpZXcgYWRkZWQgYnkgdHNpY2tsZVxuICogQHN1cHByZXNzIHtjaGVja1R5cGVzfSBjaGVja2VkIGJ5IHRzY1xuICovXG5jbGFzcyBTbGlkZVRvZ2dsZU1vZHVsZSB7XG59XG5TbGlkZVRvZ2dsZU1vZHVsZS5kZWNvcmF0b3JzID0gW1xuICAgIHsgdHlwZTogTmdNb2R1bGUsIGFyZ3M6IFt7XG4gICAgICAgICAgICAgICAgaW1wb3J0czogW0NvbW1vbk1vZHVsZV0sXG4gICAgICAgICAgICAgICAgZGVjbGFyYXRpb25zOiBbTWF0ZXJpYWxUb2dnbGVDb21wb25lbnRdLFxuICAgICAgICAgICAgICAgIGV4cG9ydHM6IFtNYXRlcmlhbFRvZ2dsZUNvbXBvbmVudF1cbiAgICAgICAgICAgIH0sXSB9LFxuXTtcbi8qKiBAbm9jb2xsYXBzZSAqL1xuU2xpZGVUb2dnbGVNb2R1bGUuY3RvclBhcmFtZXRlcnMgPSAoKSA9PiBbXTtcblxuLyoqXG4gKiBAZmlsZW92ZXJ2aWV3IGFkZGVkIGJ5IHRzaWNrbGVcbiAqIEBzdXBwcmVzcyB7Y2hlY2tUeXBlc30gY2hlY2tlZCBieSB0c2NcbiAqL1xuXG4vKipcbiAqIEBmaWxlb3ZlcnZpZXcgYWRkZWQgYnkgdHNpY2tsZVxuICogQHN1cHByZXNzIHtjaGVja1R5cGVzfSBjaGVja2VkIGJ5IHRzY1xuICovXG5cbi8qKlxuICogQGZpbGVvdmVydmlldyBhZGRlZCBieSB0c2lja2xlXG4gKiBAc3VwcHJlc3Mge2NoZWNrVHlwZXN9IGNoZWNrZWQgYnkgdHNjXG4gKi9cbi8qKlxuICogR2VuZXJhdGVkIGJ1bmRsZSBpbmRleC4gRG8gbm90IGVkaXQuXG4gKi9cblxuZXhwb3J0IHsgTWF0ZXJpYWxUb2dnbGVDb21wb25lbnQsIFNsaWRlVG9nZ2xlTW9kdWxlIH07XG4iXX0=